{
	"info": {
		"_postman_id": "3c294eab-e290-4ee9-a5e1-4e50fd79ddae",
		"name": "FFME2-18  Register Company Admin ",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Positive",
			"item": [
				{
					"name": "FFME2-18  Techserve4u admin should be able to register company admin ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "003b4c5a-6744-402b-8edd-607d1ae7b636",
								"exec": [
									"// Validate statues code ",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"// validate response time ",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//create variable for json Data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema = {",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": \"Successfully registered dashboard users Aleaha_2\",",
									"            \"status\": \"success\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"Successfully registered dashboard users Aleaha_2\"",
									"            ]",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"success\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Validate Schema for this URL",
									"tests[\"valid schema\"] = tv4.validate(jsonData, schema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"1asdf234\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"khan\",\n \"company_id\": 179,\n \"member_type\": 51\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Techserve4u admin should be able to register company from admin panel so that they can access the service.\n\nSE: Shiblu Ahmed\nPO: Pranto Majumder\nQA: Abidur Aleaha khan\nReviewer:Pranto Majumder\n\nTest Steps: Test steps includes the following payload as a json format in body\nMethod: POST\n{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"1asdf234\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"khan\",\n \"company_id\": 179,\n \"member_type\": 51\n}\nExpected Result:\n{\n    \"message\": \"Successfully registered dashboord users Aleaha_2\",\n    \"status\": \"success\"\n}\nActual Result:\n{\n    \"message\": \"Successfully registered dashboard users Aleaha_2\",\n    \"status\": \"success\"\n}\nStatus Code: 201 CREATED"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Negative",
			"item": [
				{
					"name": "FFME2-18 -1  Register company admin without email ",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "da5b463b-4a04-439d-b193-eb17b9378391",
								"exec": [
									"// Validate statues code ",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"// validate response time ",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//create variable for json Data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema ={",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"email must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"email must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"email must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Validate Schema for this URL",
									"tests[\"valid schema\"] = tv4.validate(jsonData, schema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n \"email\": \"\",\n \"password\": \"1asdf234\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"khan\",\n \"company_id\": 179,\n \"member_type\": 51\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" email info.\n\nSE: Shiblu Ahmed \nPO: Pranto Majumder\nQA: Aleaha Khan\nReviewer: Pranto Majumder \n\nTest steps: Test steps includes the following as a json forman in body\nMethod: POST \n{\n \"email\": \"\",\n \"password\": \"1asdf234\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"khan\",\n \"company_id\": 179,\n \"member_type\": 51\n}\nExpected Result: \n{\n    \"message\": [\n        \"email must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nActual Result:\n{\n    \"message\": [\n        \"email must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nStatues code: 403 FORBIDDEN\nTest Result: Pass"
					},
					"response": []
				},
				{
					"name": "FFME2-18 -2  Register company admin without password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e8acf16-12db-478f-ac12-78c502afb92c",
								"exec": [
									"// Validate statues code ",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"// validate response time ",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//create variable for json Data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema ={",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"password must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"password must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"password must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Validate Schema for this URL",
									"tests[\"valid schema\"] = tv4.validate(jsonData, schema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"khan\",\n \"company_id\": 179,\n \"member_type\": 51\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" password info.\n\nSE: Shiblu Ahmed \nPO: Pranto Majumder\nQA: Aleaha Khan\nReviewer: Pranto Majumder \n\nTest steps: Test steps includes the following as a json forman in body\nMethod: POST \n{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"khan\",\n \"company_id\": 179,\n \"member_type\": 51\n}\nExpected Result: \n{\n    \"message\": [\n        \"password must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nActual Result:\n{\n    \"message\": [\n        \"password must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nStatues code: 403 FORBIDDEN\nTest Result: Pass"
					},
					"response": []
				},
				{
					"name": "FFME2-18 -3  Register company admin without username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ad547d5e-a94d-4ed9-9f75-131921add552",
								"exec": [
									"// Validate statues code ",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"// validate response time ",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//create variable for json Data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema ={",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"username must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"username must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"username must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Validate Schema for this URL",
									"tests[\"valid schema\"] = tv4.validate(jsonData, schema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"1asdf234\",\n \"username\": \"\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"khan\",\n \"company_id\": 179,\n \"member_type\": 51\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" username info.\n\nSE: Shiblu Ahmed \nPO: Pranto Majumder\nQA: Aleaha Khan\nReviewer: Pranto Majumder \n\nTest steps: Test steps includes the following as a json forman in body\nMethod: POST \n{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"1asdf234\",\n \"username\": \"\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"khan\",\n \"company_id\": 179,\n \"member_type\": 51\n}\nExpected Result: \n{\n    \"message\": [\n        \"username must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nActual Result:\n{\n    \"message\": [\n        \"username must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nStatues code: 403 FORBIDDEN\nTest Result: Pass"
					},
					"response": []
				},
				{
					"name": "FFME2-18 -4  Register company admin without firstname",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "90843826-fceb-445f-bd66-de8bf54bd20d",
								"exec": [
									"// Validate statues code ",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"// validate response time ",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//create variable for json Data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema ={",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"firstname must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"firstname must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"firstname must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Validate Schema for this URL",
									"tests[\"valid schema\"] = tv4.validate(jsonData, schema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"1asdf234\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"\",\n \"lastname\": \"khan\",\n \"company_id\": 179,\n \"member_type\": 51\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" firstname info.\n\nSE: Shiblu Ahmed \nPO: Pranto Majumder\nQA: Aleaha Khan\nReviewer: Pranto Majumder \n\nTest steps: Test steps includes the following as a json forman in body\nMethod: POST \n{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"1asdf234\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"\",\n \"lastname\": \"khan\",\n \"company_id\": 179,\n \"member_type\": 51\n}\nExpected Result: \n{\n    \"message\": [\n        \"firstname must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nActual Result:\n{\n    \"message\": [\n        \"firstname must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nStatues code: 403 FORBIDDEN\nTest Result: Pass"
					},
					"response": []
				},
				{
					"name": "FFME2-18 -5  Register company admin without lastname",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09a2ba1f-fb4a-4a0b-bb23-a5e35fe87a53",
								"exec": [
									"// Validate statues code ",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"// validate response time ",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//create variable for json Data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema ={",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"lastname must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"lastname must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"lastname must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Validate Schema for this URL",
									"tests[\"valid schema\"] = tv4.validate(jsonData, schema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"1asdf234\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"\",\n \"company_id\": 179,\n \"member_type\": 51\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" lastname info.\n\nSE: Shiblu Ahmed \nPO: Pranto Majumder\nQA: Aleaha Khan\nReviewer: Pranto Majumder \n\nTest steps: Test steps includes the following as a json forman in body\nMethod: POST \n{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"1asdf234\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"\",\n \"company_id\": 179,\n \"member_type\": 51\n}\nExpected Result: \n{\n    \"message\": [\n        \"lastname must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nActual Result:\n{\n    \"message\": [\n        \"lastname must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nStatues code: 403 FORBIDDEN\nTest Result: Pass"
					},
					"response": []
				},
				{
					"name": "FFME2-18 -6  Register company admin without company id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00a674c3-8496-4083-b83f-a1ddbb30100b",
								"exec": [
									"// Validate statues code ",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"// validate response time ",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//create variable for json Data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema ={",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"company id must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"company id must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"company id must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Validate Schema for this URL",
									"tests[\"valid schema\"] = tv4.validate(jsonData, schema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"1asdf234\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"khan\",\n \"company_id\": \"\",\n \"member_type\": 51\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" company_id info.\n\nSE: Shiblu Ahmed \nPO: Pranto Majumder\nQA: Aleaha Khan\nReviewer: Pranto Majumder \n\nTest steps: Test steps includes the following as a json forman in body\nMethod: POST \n{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"1asdf234\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"khan\",\n \"company_id\": \"\",\n \"member_type\": 51\n}\nExpected Result: \n{\n    \"message\": [\n        \"company id must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nActual Result:\n{\n    \"message\": [\n        \"company id must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nStatues code: 403 FORBIDDEN\nTest Result: Pass"
					},
					"response": []
				},
				{
					"name": "FFME2-18- 7  Register company admin without memeber_ type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e439358-0b9b-412b-929c-4511668eb72e",
								"exec": [
									"// Validate statues code ",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"// validate response time ",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//create variable for json Data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema ={",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"member_type must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"member_type must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"member_type must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Validate Schema for this URL",
									"tests[\"valid schema\"] = tv4.validate(jsonData, schema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"1asdf234\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"khan\",\n \"company_id\": 179,\n \"member_type\": \"\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" member_type info.\n\nSE: Shiblu Ahmed \nPO: Pranto Majumder\nQA: Aleaha Khan\nReviewer: Pranto Majumder \n\nTest steps: Test steps includes the following as a json forman in body\nMethod: POST \n{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"1asdf234\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"khan\",\n \"company_id\": \"179\",\n \"member_type\": \"\"\n}\nExpected Result: \n{\n    \"message\": [\n        \"member-type must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nActual Result:\n{\n    \"message\": [\n        \"member_type must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nStatues code: 403 FORBIDDEN\nTest Result: Pass"
					},
					"response": []
				},
				{
					"name": "FFME2-18 -8  Register company admin without email and password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e311e87a-d06e-44a4-8897-c5070c4c4cb3",
								"exec": [
									"// Validate statues code ",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"// validate response time ",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//create variable for json Data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema ={",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"email must be non-empty\",",
									"                \"password must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"email must be non-empty\",",
									"                    \"password must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"email must be non-empty\",",
									"                            \"password must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Validate Schema for this URL",
									"tests[\"valid schema\"] = tv4.validate(jsonData, schema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n \"email\": \"\",\n \"password\": \"\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"khan\",\n \"company_id\": 179,\n \"member_type\": 51\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" email and password info.\n\nSE: Shiblu Ahmed \nPO: Pranto Majumder\nQA: Aleaha Khan\nReviewer: Pranto Majumder \n\nTest steps: Test steps includes the following as a json forman in body\nMethod: POST \n{\n \"email\": \"\",\n \"password\": \"\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"khan\",\n \"company_id\": \"179\",\n \"member_type\": 51\n}\nExpected Result: \n{\n    \"message\": [\n        \"email must be non-empty\"\n        \"password must not be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nActual Result:\n{\n    \"message\": [\n        \"email must be non-empty\"\n        \"password must not be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nStatues code: 403 FORBIDDEN\nTest Result: Pass"
					},
					"response": []
				},
				{
					"name": "FFME2-18 -9  Register company admin without email and username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ef998bf-f8d8-4c8d-866b-ff377fb69292",
								"exec": [
									"// Validate statues code ",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"// validate response time ",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//create variable for json Data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema ={",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"email must be non-empty\",",
									"                \"username must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"email must be non-empty\",",
									"                    \"username must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"email must be non-empty\",",
									"                            \"username must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Validate Schema for this URL",
									"tests[\"valid schema\"] = tv4.validate(jsonData, schema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n \"email\": \"\",\n \"password\": \"1asdf234\",\n \"username\": \"\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"khan\",\n \"company_id\": 179,\n \"member_type\": 51\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" email and username info.\n\nSE: Shiblu Ahmed \nPO: Pranto Majumder\nQA: Aleaha Khan\nReviewer: Pranto Majumder \n\nTest steps: Test steps includes the following as a json forman in body\nMethod: POST \n{\n \"email\": \"\",\n \"password\": \"1asdf234\",\n \"username\": \"\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"khan\",\n \"company_id\": 179,\n \"member_type\": 51\n}\nExpected Result: \n{\n    \"message\": [\n        \"email must be non-empty\"\n        \"username must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nActual Result:\n{\n    \"message\": [\n        \"email must be non-empty\"\n        \"username must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nStatues code: 403 FORBIDDEN\nTest Result: Pass"
					},
					"response": []
				},
				{
					"name": "FFME2-18 -10  Register company admin without email and firstname",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "921239d2-d7b7-40c2-b581-f6804114a069",
								"exec": [
									"// Validate statues code ",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"// validate response time ",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//create variable for json Data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema ={",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"email must be non-empty\",",
									"                \"firstname must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"email must be non-empty\",",
									"                    \"firstname must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"email must be non-empty\",",
									"                            \"firstname must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Validate Schema for this URL",
									"tests[\"valid schema\"] = tv4.validate(jsonData, schema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n \"email\": \"\",\n \"password\": \"1asdf234\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"\",\n \"lastname\": \"khan\",\n \"company_id\": 179,\n \"member_type\": 51\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" email and firstname info.\n\nSE: Shiblu Ahmed \nPO: Pranto Majumder\nQA: Aleaha Khan\nReviewer: Pranto Majumder \n\nTest steps: Test steps includes the following as a json forman in body\nMethod: POST \n{\n \"email\": \"\",\n \"password\": \"1asdf234\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"\",\n \"lastname\": \"khan\",\n \"company_id\": 179,\n \"member_type\": 51\n}\nExpected Result: \n{\n    \"message\": [\n        \"email must be non-empty\"\n        \"firstname must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nActual Result:\n{\n    \"message\": [\n        \"email must be non-empty\"\n        \"firstname must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nStatues code: 403 FORBIDDEN\nTest Result: Pass"
					},
					"response": []
				},
				{
					"name": "FFME2-18 -11 Register company admin without email and lastname",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5afe660a-ed73-4284-9da1-5585fd969942",
								"exec": [
									"// Validate statues code ",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"// validate response time ",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//create variable for json Data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema ={",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"email must be non-empty\",",
									"                \"lastname must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"email must be non-empty\",",
									"                    \"lastname must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"email must be non-empty\",",
									"                            \"lastname must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Validate Schema for this URL",
									"tests[\"valid schema\"] = tv4.validate(jsonData, schema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n \"email\": \"\",\n \"password\": \"1asdf234\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"\",\n \"company_id\": 179,\n \"member_type\": 51\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" email and lastname info.\n\nSE: Shiblu Ahmed \nPO: Pranto Majumder\nQA: Aleaha Khan\nReviewer: Pranto Majumder \n\nTest steps: Test steps includes the following as a json forman in body\nMethod: POST \n{\n \"email\": \"\",\n \"password\": \"1asdf234\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"\",\n \"company_id\": 179,\n \"member_type\": 51\n}\nExpected Result: \n{\n    \"message\": [\n        \"email must be non-empty\"\n        \"lastname must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nActual Result:\n{\n    \"message\": [\n        \"email must be non-empty\"\n        \"lastname must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nStatues code: 403 FORBIDDEN\nTest Result: Pass"
					},
					"response": []
				},
				{
					"name": "FFME2-18 -12 Register company admin without email and company id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a05dbd8b-7c01-4b44-8aec-9cb6abc35251",
								"exec": [
									"// Validate statues code ",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"// validate response time ",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//create variable for json Data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema ={",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"email must be non-empty\",",
									"                \"company id must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"email must be non-empty\",",
									"                    \"company id must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"email must be non-empty\",",
									"                            \"company id must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Validate Schema for this URL",
									"tests[\"valid schema\"] = tv4.validate(jsonData, schema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n \"email\": \"\",\n \"password\": \"1asdf234\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"khan\",\n \"company_id\": \"\",\n \"member_type\": 51\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" email and company_id info.\n\nSE: Shiblu Ahmed \nPO: Pranto Majumder\nQA: Aleaha Khan\nReviewer: Pranto Majumder \n\nTest steps: Test steps includes the following as a json forman in body\nMethod: POST \n{\n \"email\": \"\",\n \"password\": \"1asdf234\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"khan\",\n \"company_id\": \"\",\n \"member_type\": 51\n}\nExpected Result: \n{\n    \"message\": [\n        \"email must be non-empty\"\n        \"company id must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nActual Result:\n{\n    \"message\": [\n        \"email must be non-empty\"\n        \"company id must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nStatues code: 403 FORBIDDEN\nTest Result: Pass"
					},
					"response": []
				},
				{
					"name": "FFME2-18 -13 Register company admin without email and member type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "171b677b-4ea4-4cc3-8240-f88eb923cdff",
								"exec": [
									"// Validate statues code ",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"// validate response time ",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//create variable for json Data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema ={",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"email must be non-empty\",",
									"                \"member_type must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"email must be non-empty\",",
									"                    \"member_type must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"email must be non-empty\",",
									"                            \"member_type must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Validate Schema for this URL",
									"tests[\"valid schema\"] = tv4.validate(jsonData, schema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n \"email\": \"\",\n \"password\": \"1asdf234\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"khan\",\n \"company_id\": 179,\n \"member_type\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" email and member type info.\n\nSE: Shiblu Ahmed \nPO: Pranto Majumder\nQA: Aleaha Khan\nReviewer: Pranto Majumder \n\nTest steps: Test steps includes the following as a json forman in body\nMethod: POST \n{\n \"email\": \"\",\n \"password\": \"1asdf234\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"khan\",\n \"company_id\": 179,\n \"member_type\": \n}\nExpected Result: \n{\n    \"message\": [\n        \"email must be non-empty\"\n        \"member type must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nActual Result:\n{\n    \"message\": [\n        \"email must be non-empty\"\n        \"member type must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nStatues code: 403 FORBIDDEN\nTest Result: Pass"
					},
					"response": []
				},
				{
					"name": "FFME2-18 -14 Register company admin without password and username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dccacd87-3008-4344-af7a-f5eba8f8c118",
								"exec": [
									"// Validate statues code ",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"// validate response time ",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//create variable for json Data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema ={",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"password must be non-empty\",",
									"                \"username must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"password must be non-empty\",",
									"                    \"username must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"password must be non-empty\",",
									"                            \"username must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Validate Schema for this URL",
									"tests[\"valid schema\"] = tv4.validate(jsonData, schema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"\",\n \"username\": \"\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"khan\",\n \"company_id\": 179,\n \"member_type\": 51\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" password and username info.\n\nSE: Shiblu Ahmed \nPO: Pranto Majumder\nQA: Aleaha Khan\nReviewer: Pranto Majumder \n\nTest steps: Test steps includes the following as a json forman in body\nMethod: POST \n{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"\",\n \"username\": \"\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"khan\",\n \"company_id\": 179,\n \"member_type\": 51\n}\nExpected Result: \n{\n    \"message\": [\n        \"password must be non-empty\"\n        \"username must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nActual Result:\n{\n    \"message\": [\n        \"password must be non-empty\"\n        \"username must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nStatues code: 403 FORBIDDEN\nTest Result: Pass"
					},
					"response": []
				},
				{
					"name": "FFME2-18 -15 Register company admin without password and firstname",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e9140af8-1c38-47a7-800c-4f94c754a0c3",
								"exec": [
									"// Validate statues code ",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"// validate response time ",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//create variable for json Data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema ={",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"password must be non-empty\",",
									"                \"firstname must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"password must be non-empty\",",
									"                    \"firstname must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"password must be non-empty\",",
									"                            \"firstname must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Validate Schema for this URL",
									"tests[\"valid schema\"] = tv4.validate(jsonData, schema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"\",\n \"lastname\": \"khan\",\n \"company_id\": 179,\n \"member_type\": 51\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" password and firstname info.\n\nSE: Shiblu Ahmed \nPO: Pranto Majumder\nQA: Aleaha Khan\nReviewer: Pranto Majumder \n\nTest steps: Test steps includes the following as a json forman in body\nMethod: POST \n{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"\",\n \"lastname\": \"khan\",\n \"company_id\": 179,\n \"member_type\": 51\n}\nExpected Result: \n{\n    \"message\": [\n        \"password must be non-empty\"\n        \"firstname must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nActual Result:\n{\n    \"message\": [\n        \"password must be non-empty\"\n        \"firstname must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nStatues code: 403 FORBIDDEN\nTest Result: Pass"
					},
					"response": []
				},
				{
					"name": "FFME2-18 -16 Register company admin without password and  lastname",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "290ff2d7-e8f9-4f72-8185-3f8d350cb507",
								"exec": [
									"// Validate statues code ",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"// validate response time ",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//create variable for json Data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema ={",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"password must be non-empty\",",
									"                \"lastname must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"password must be non-empty\",",
									"                    \"lastname must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"password must be non-empty\",",
									"                            \"lastname must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Validate Schema for this URL",
									"tests[\"valid schema\"] = tv4.validate(jsonData, schema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"\",\n \"company_id\": 179,\n \"member_type\": 51\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" password and lastname info.\n\nSE: Shiblu Ahmed \nPO: Pranto Majumder\nQA: Aleaha Khan\nReviewer: Pranto Majumder \n\nTest steps: Test steps includes the following as a json forman in body\nMethod: POST \n{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"\",\n \"company_id\": 179,\n \"member_type\": 51\n}\nExpected Result: \n{\n    \"message\": [\n        \"password must be non-empty\"\n        \"lastname must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nActual Result:\n{\n    \"message\": [\n        \"password must be non-empty\"\n        \"lastname must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nStatues code: 403 FORBIDDEN\nTest Result: Pass"
					},
					"response": []
				},
				{
					"name": "FFME2-18 -17 Register company admin without password and  company id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "348d95c5-747d-4fe4-a9d5-92ca91e121a5",
								"exec": [
									"// Validate statues code ",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"// validate response time ",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//create variable for json Data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema ={",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"password must be non-empty\",",
									"                \"company id must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"password must be non-empty\",",
									"                    \"company id must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"password must be non-empty\",",
									"                            \"company id must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Validate Schema for this URL",
									"tests[\"valid schema\"] = tv4.validate(jsonData, schema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"khan\",\n \"company_id\": \"\",\n \"member_type\": 51\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" password and company_id info.\n\nSE: Shiblu Ahmed \nPO: Pranto Majumder\nQA: Aleaha Khan\nReviewer: Pranto Majumder \n\nTest steps: Test steps includes the following as a json forman in body\nMethod: POST \n{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"khan\",\n \"company_id\": \"\",\n \"member_type\": 51\n}\nExpected Result: \n{\n    \"message\": [\n        \"password must be non-empty\"\n        \"company id must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nActual Result:\n{\n    \"message\": [\n        \"password must be non-empty\"\n        \"company id must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nStatues code: 403 FORBIDDEN\nTest Result: Pass"
					},
					"response": []
				},
				{
					"name": "FFME2-18 -18 Register company admin without password and  member_type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "24ab947b-a958-4ebb-914d-6f5ff26ad08b",
								"exec": [
									"// Validate statues code ",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"// validate response time ",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//create variable for json Data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema ={",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"password must be non-empty\",",
									"                \"member_type must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"password must be non-empty\",",
									"                    \"member_type must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"password must be non-empty\",",
									"                            \"member_type must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Validate Schema for this URL",
									"tests[\"valid schema\"] = tv4.validate(jsonData, schema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"khan\",\n \"company_id\": 179,\n \"member_type\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" password and member_type info.\n\nSE: Shiblu Ahmed \nPO: Pranto Majumder\nQA: Aleaha Khan\nReviewer: Pranto Majumder \n\nTest steps: Test steps includes the following as a json forman in body\nMethod: POST \n{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"khan\",\n \"company_id\": 179,\n \"member_type\": \n}\nExpected Result: \n{\n    \"message\": [\n        \"password must be non-empty\"\n        \"member_type must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nActual Result:\n{\n    \"message\": [\n        \"password must be non-empty\"\n        \"member_type must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nStatues code: 403 FORBIDDEN\nTest Result: Pass"
					},
					"response": []
				},
				{
					"name": "FFME2-18 -19 Register company admin without username and firstname",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c7d1eee7-72b0-4f0f-b1ab-b89e0cc3e08d",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0281bba5-cecb-4a16-80a3-2f43180aeccb",
								"exec": [
									"// Validate statues code ",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"// validate response time ",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//create variable for json Data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema ={",
									"    \"message\": [",
									"        \"username must be non-empty\",",
									"        \"firstname must be non-empty\"",
									"    ],",
									"    \"status\": \"failed\"",
									"}",
									"//Validate Schema for this URL",
									"tests[\"valid schema\"] = tv4.validate(jsonData, schema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"1asdf234\",\n \"username\": \"\",\n \"firstname\": \"\",\n \"lastname\": \"khan\",\n \"company_id\": 179,\n \"member_type\": 51\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" username and firstname info.\n\nSE: Shiblu Ahmed \nPO: Pranto Majumder\nQA: Aleaha Khan\nReviewer: Pranto Majumder \n\nTest steps: Test steps includes the following as a json forman in body\nMethod: POST \n{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"1asdf234\",\n \"username\": \"\",\n \"firstname\": \"\",\n \"lastname\": \"khan\",\n \"company_id\": 179,\n \"member_type\": 51\n}\nExpected Result: \n{\n    \"message\": [\n        \"username must be non-empty\"\n        \"firstname must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nActual Result:\n{\n    \"message\": [\n        \"username must be non-empty\"\n        firstname must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nStatues code: 403 FORBIDDEN\nTest Result: Pass"
					},
					"response": []
				},
				{
					"name": "FFME2-18 -20 Register company admin without username and lastname",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c903833b-4478-478c-ac19-577b70cac4ce",
								"exec": [
									"// Validate statues code ",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"// validate response time ",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//create variable for json Data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema ={",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"username must be non-empty\",",
									"                \"lastname must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"username must be non-empty\",",
									"                    \"lastname must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"username must be non-empty\",",
									"                            \"lastname must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Validate Schema for this URL",
									"tests[\"valid schema\"] = tv4.validate(jsonData, schema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"1asdf234\",\n \"username\": \"\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"\",\n \"company_id\": 179,\n \"member_type\": 51\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" username and lastname info.\n\nSE: Shiblu Ahmed \nPO: Pranto Majumder\nQA: Aleaha Khan\nReviewer: Pranto Majumder \n\nTest steps: Test steps includes the following as a json forman in body\nMethod: POST \n{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"1asdf234\",\n \"username\": \"\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"\",\n \"company_id\": 179,\n \"member_type\": 51\n}\nExpected Result: \n{\n    \"message\": [\n        \"username must be non-empty\"\n        \"lastname must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nActual Result:\n{\n    \"message\": [\n        \"username must be non-empty\"\n        \"lastname must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nStatues code: 403 FORBIDDEN\nTest Result: Pass"
					},
					"response": []
				},
				{
					"name": "FFME2-18 -21 Register company admin without username and company _id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c2528a43-fb13-47eb-9d26-ef7ebbf7f138",
								"exec": [
									"// Validate statues code ",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"// validate response time ",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//create variable for json Data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema ={",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"username must be non-empty\",",
									"                \"company id must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"username must be non-empty\",",
									"                    \"company id must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"username must be non-empty\",",
									"                            \"company id must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Validate Schema for this URL",
									"tests[\"valid schema\"] = tv4.validate(jsonData, schema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"1asdf234\",\n \"username\": \"\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"khan\",\n \"company_id\": \"\",\n \"member_type\": 51\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" username and company_id info.\n\nSE: Shiblu Ahmed \nPO: Pranto Majumder\nQA: Aleaha Khan\nReviewer: Pranto Majumder \n\nTest steps: Test steps includes the following as a json forman in body\nMethod: POST \n{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"1asdf234\",\n \"username\": \"\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"khan\",\n \"company_id\": \"\",\n \"member_type\": 51\n}\nExpected Result: \n{\n    \"message\": [\n        \"username must be non-empty\"\n        \"company_id must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nActual Result:\n{\n    \"message\": [\n        \"username must be non-empty\"\n        \"company_id must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nStatues code: 403 FORBIDDEN\nTest Result: Pass"
					},
					"response": []
				},
				{
					"name": "FFME2-18 -22 Register company admin without username and member_ type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e51f958a-a107-4a34-b4f2-05a5363176f0",
								"exec": [
									"// Validate statues code ",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"// validate response time ",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//create variable for json Data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema ={",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"username must be non-empty\",",
									"                \"member_type must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"username must be non-empty\",",
									"                    \"member_type must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"username must be non-empty\",",
									"                            \"member_type must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Validate Schema for this URL",
									"tests[\"valid schema\"] = tv4.validate(jsonData, schema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"1asdf234\",\n \"username\": \"\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"khan\",\n \"company_id\": 179,\n \"member_type\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" username and member_type info.\n\nSE: Shiblu Ahmed \nPO: Pranto Majumder\nQA: Aleaha Khan\nReviewer: Pranto Majumder \n\nTest steps: Test steps includes the following as a json forman in body\nMethod: POST \n{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"1asdf234\",\n \"username\": \"\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"khan\",\n \"company_id\": 179,\n \"member_type\": \n}\nExpected Result: \n{\n    \"message\": [\n        \"username must be non-empty\"\n        \"member_type must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nActual Result:\n{\n    \"message\": [\n        \"username must be non-empty\"\n        \"member-type must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nStatues code: 403 FORBIDDEN\nTest Result: Pass"
					},
					"response": []
				},
				{
					"name": "FFME2-18 -23 Register company admin without firstname and lastname",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3cc90bd7-2492-4294-b59e-149eff104f23",
								"exec": [
									"// Validate statues code ",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"// validate response time ",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//create variable for json Data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema ={",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"firstname must be non-empty\",",
									"                \"lastname must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"firstname must be non-empty\",",
									"                    \"lastname must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"firstname must be non-empty\",",
									"                            \"lastname must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Validate Schema for this URL",
									"tests[\"valid schema\"] = tv4.validate(jsonData, schema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"1asdf234\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"\",\n \"lastname\": \"\",\n \"company_id\": 179,\n \"member_type\": 51\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" firstname and lastname info.\n\nSE: Shiblu Ahmed \nPO: Pranto Majumder\nQA: Aleaha Khan\nReviewer: Pranto Majumder \n\nTest steps: Test steps includes the following as a json forman in body\nMethod: POST \n{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"1asdf234\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"\",\n \"lastname\": \"\",\n \"company_id\": 179,\n \"member_type\": 51\n}\nExpected Result: \n{\n    \"message\": [\n        \"firstname must be non-empty\"\n        \"lastname must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nActual Result:\n{\n    \"message\": [\n        \"firstname must be non-empty\"\n        \"lastname must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nStatues code: 403 FORBIDDEN\nTest Result: Pass"
					},
					"response": []
				},
				{
					"name": "FFME2-18- 24 Register company admin without firstname and company_id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b4fef8c7-e40f-4cd7-9397-c66bfc0093e4",
								"exec": [
									"// Validate statues code ",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"// validate response time ",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//create variable for json Data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema ={",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"firstname must be non-empty\",",
									"                \"company id must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"firstname must be non-empty\",",
									"                    \"company id must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"firstname must be non-empty\",",
									"                            \"company id must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Validate Schema for this URL",
									"tests[\"valid schema\"] = tv4.validate(jsonData, schema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"1asdf234\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"\",\n \"lastname\": \"khan\",\n \"company_id\": \"\",\n \"member_type\": 51\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" firstname and company_id info.\n\nSE: Shiblu Ahmed \nPO: Pranto Majumder\nQA: Aleaha Khan\nReviewer: Pranto Majumder \n\nTest steps: Test steps includes the following as a json forman in body\nMethod: POST \n{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"1asdf234\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"\",\n \"lastname\": \"khan\",\n \"company_id\": \"\",\n \"member_type\": 51\n}\nExpected Result: \n{\n    \"message\": [\n        \"firstname must be non-empty\"\n        \"company_id must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nActual Result:\n{\n    \"message\": [\n        \"firstname must be non-empty\"\n        \"company_id must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nStatues code: 403 FORBIDDEN\nTest Result: Pass"
					},
					"response": []
				},
				{
					"name": "FFME2-18 -25 Register company admin without firstname and member _type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3847b5b6-f24e-48f8-af49-f1eabb219782",
								"exec": [
									"// Validate statues code ",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"// validate response time ",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//create variable for json Data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema ={",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"firstname must be non-empty\",",
									"                \"member_type must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"firstname must be non-empty\",",
									"                    \"member_type must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"firstname must be non-empty\",",
									"                            \"member_type must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Validate Schema for this URL",
									"tests[\"valid schema\"] = tv4.validate(jsonData, schema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"1asdf234\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"\",\n \"lastname\": \"khan\",\n \"company_id\": 179,\n \"member_type\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" firstname and member_type info.\n\nSE: Shiblu Ahmed \nPO: Pranto Majumder\nQA: Aleaha Khan\nReviewer: Pranto Majumder \n\nTest steps: Test steps includes the following as a json forman in body\nMethod: POST \n{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"1asdf234\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"\",\n \"lastname\": \"khan\",\n \"company_id\": 179,\n \"member_type\": \n}\nExpected Result: \n{\n    \"message\": [\n        \"firstname must be non-empty\"\n        \"member_type must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nActual Result:\n{\n    \"message\": [\n        \"firstname must be non-empty\"\n        \"member_type must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nStatues code: 403 FORBIDDEN\nTest Result: Pass"
					},
					"response": []
				},
				{
					"name": "FFME2-18 -26 Register company admin without lastname and company_ id",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b989a87-f1b0-4fcf-bd6f-e704e7452b6e",
								"exec": [
									"// Validate statues code ",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"// validate response time ",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//create variable for json Data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema ={",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"lastname must be non-empty\",",
									"                \"company id must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"lastname must be non-empty\",",
									"                    \"company id must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"lastname must be non-empty\",",
									"                            \"company id must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Validate Schema for this URL",
									"tests[\"valid schema\"] = tv4.validate(jsonData, schema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"1asdf234\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"\",\n \"company_id\": \"\",\n \"member_type\": 51\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" lastname and company_id info.\n\nSE: Shiblu Ahmed \nPO: Pranto Majumder\nQA: Aleaha Khan\nReviewer: Pranto Majumder \n\nTest steps: Test steps includes the following as a json forman in body\nMethod: POST \n{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"1asdf234\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"\",\n \"company_id\": \"\",\n \"member_type\": 51\n}\nExpected Result: \n{\n    \"message\": [\n        \"lastname must be non-empty\"\n        \"company_id must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nActual Result:\n{\n    \"message\": [\n        \"lastname must be non-empty\"\n        \"company_id must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nStatues code: 403 FORBIDDEN\nTest Result: Pass"
					},
					"response": []
				},
				{
					"name": "FFME2-18 -27 Register company admin without lastname and member type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f73989b6-2aad-4729-961a-cd45f07efe8e",
								"exec": [
									"// Validate statues code ",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"// validate response time ",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//create variable for json Data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema ={",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"lastname must be non-empty\",",
									"                \"member_type must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"lastname must be non-empty\",",
									"                    \"member_type must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"lastname must be non-empty\",",
									"                            \"member_type must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Validate Schema for this URL",
									"tests[\"valid schema\"] = tv4.validate(jsonData, schema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"1asdf234\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"\",\n \"company_id\": 179,\n \"member_type\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" lastname and member_type info.\n\nSE: Shiblu Ahmed \nPO: Pranto Majumder\nQA: Aleaha Khan\nReviewer: Pranto Majumder \n\nTest steps: Test steps includes the following as a json forman in body\nMethod: POST \n{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"1asdf234\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"\",\n \"company_id\": 179,\n \"member_type\": \"\"\n}\nExpected Result: \n{\n    \"message\": [\n        \"lastname must be non-empty\"\n        \"member_type must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nActual Result:\n{\n    \"message\": [\n        \"lastname must be non-empty\"\n        \"member_type must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nStatues code: 403 FORBIDDEN\nTest Result: Pass"
					},
					"response": []
				},
				{
					"name": "FFME2-18 -28 Register company admin without company _id and member_ type",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7989e2d-00de-4201-bb48-51146f4653ea",
								"exec": [
									"// Validate statues code ",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"// validate response time ",
									"pm.test(\"Response time is less than 600ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(600);",
									"});",
									"",
									"//create variable for json Data",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"var schema ={",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
									"    \"$id\": \"http://example.com/example.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The root schema\",",
									"    \"description\": \"The root schema comprises the entire JSON document.\",",
									"    \"default\": {},",
									"    \"examples\": [",
									"        {",
									"            \"message\": [",
									"                \"company id must be non-empty\",",
									"                \"member_type must be non-empty\"",
									"            ],",
									"            \"status\": \"failed\"",
									"        }",
									"    ],",
									"    \"required\": [",
									"        \"message\",",
									"        \"status\"",
									"    ],",
									"    \"properties\": {",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"array\",",
									"            \"title\": \"The message schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": [],",
									"            \"examples\": [",
									"                [",
									"                    \"company id must be non-empty\",",
									"                    \"member_type must be non-empty\"",
									"                ]",
									"            ],",
									"            \"additionalItems\": true,",
									"            \"items\": {",
									"                \"$id\": \"#/properties/message/items\",",
									"                \"anyOf\": [",
									"                    {",
									"                        \"$id\": \"#/properties/message/items/anyOf/0\",",
									"                        \"type\": \"string\",",
									"                        \"title\": \"The first anyOf schema\",",
									"                        \"description\": \"An explanation about the purpose of this instance.\",",
									"                        \"default\": \"\",",
									"                        \"examples\": [",
									"                            \"company id must be non-empty\",",
									"                            \"member_type must be non-empty\"",
									"                        ]",
									"                    }",
									"                ]",
									"            }",
									"        },",
									"        \"status\": {",
									"            \"$id\": \"#/properties/status\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The status schema\",",
									"            \"description\": \"An explanation about the purpose of this instance.\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"failed\"",
									"            ]",
									"        }",
									"    },",
									"    \"additionalProperties\": true",
									"}",
									"//Validate Schema for this URL",
									"tests[\"valid schema\"] = tv4.validate(jsonData, schema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"1asdf234\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"khan\",\n \"company_id\": \"\",\n \"member_type\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/api/v1/field-force/auth/register-dashboard-user",
							"host": [
								"{{URL}}"
							],
							"path": [
								"api",
								"v1",
								"field-force",
								"auth",
								"register-dashboard-user"
							]
						},
						"description": "Objective: Test is to identify invalid result to leave \"empty\" company_id and member_type info.\n\nSE: Shiblu Ahmed \nPO: Pranto Majumder\nQA: Aleaha Khan\nReviewer: Pranto Majumder \n\nTest steps: Test steps includes the following as a json forman in body\nMethod: POST \n{\n \"email\": \"Aleaha2@email.com\",\n \"password\": \"1asdf234\",\n \"username\": \"Aleaha_2\",\n \"firstname\": \"Aleaha\",\n \"lastname\": \"khan\",\n \"company_id\": \"\",\n \"member_type\": \"\"\n}\nExpected Result: \n{\n    \"message\": [\n        \"company_id must be non-empty\"\n        \"member_type must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nActual Result:\n{\n    \"message\": [\n        \"company_id must be non-empty\"\n        \"member_type must be non-empty\"\n    ],\n    \"status\": \"failed\"\n}\n\nStatues code: 403 FORBIDDEN\nTest Result: Pass"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d94d83b7-f8f2-45cb-988f-8943d654b025",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "72d06364-a537-4863-a02d-79486edec670",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "736a8e65-7c3d-42dc-b14c-73ef4f0ef733",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "176cd829-9b2a-48d0-b26f-4005d19f96f0",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}